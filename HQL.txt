HQL is an object-oriented query language, similar to SQL, but instead of operating on tables and columns, HQL works with persistent objects and their properties. 


String hql = "FROM Employee";
Query query = session.createQuery(hql);


String hql = "FROM Employee AS E";
Query query = session.createQuery(hql);

String hql = "SELECT E.firstName FROM Employee E";
Query query = session.createQuery(hql);

String hql = "FROM Employee E WHERE E.id = 10";
Query query = session.createQuery(hql);

String hql = "FROM Employee E WHERE E.id > 10 ORDER BY E.salary DESC";
Query query = session.createQuery(hql);

String hql = "FROM Employee E WHERE E.id > 10 ORDER BY E.firstName DESC, E.salary DESC ";
Query query = session.createQuery(hql);


Named Parameters

String hql = "FROM Employee E WHERE E.id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id",10);


String hql = "from Product where price > :price";
Query query = session.createQuery(hql);
query.setDouble("price",25.0);

UPDATE Clause

String hql = "UPDATE Employee set salary = :salary WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("salary", 1000);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);

Delete 
String hql = "DELETE FROM Employee WHERE id = :employee_id";
Query query = session.createQuery(hql);
query.setParameter("employee_id", 10);
int result = query.executeUpdate();
System.out.println("Rows affected: " + result);


Unique
String hql = "from Product where price > 25.0";
Query query = session.createQuery(hql);
query.setMaxResults(1);
Product product = (Product) query.uniqueResult();



Aggregate Methods

avg(property name): The average of a property’s value
count(property name or *): The number of times a property occurs in the results
max(property name): The maximum value of the property values
min(property name): The minimum value of the property values
sum(property name): The sum total of the property values


Criteria cr = session.createCriteria(Employee.class);

Criteria cr = session.createCriteria(Employee.class);
cr.add(Restrictions.eq("salary", 2000));


// To get records having salary more than 2000
cr.add(Restrictions.gt("salary", 2000));

// To get records having salary less than 2000
cr.add(Restrictions.lt("salary", 2000));

// To get records having fistName starting with zara
cr.add(Restrictions.like("firstName", "zara%"));

// Case sensitive form of the above restriction.
cr.add(Restrictions.ilike("firstName", "zara%"));

// To get records having salary in between 1000 and 2000
cr.add(Restrictions.between("salary", 1000, 2000));

// To check if the given property is null
cr.add(Restrictions.isNull("salary"));

// To check if the given property is not null
cr.add(Restrictions.isNotNull("salary"));

// To check if the given property is empty
cr.add(Restrictions.isEmpty("salary"));

// To check if the given property is not empty
cr.add(Restrictions.isNotEmpty("salary"));
